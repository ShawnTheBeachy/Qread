//HintName: TestNamespace.TestDto.g.cs
// <auto-generated />
#nullable enable
using System.Collections.Frozen;
using System.Data;

namespace TestNamespace;

partial record TestDto
{
    private static FrozenDictionary<string, int>? _propIndices;

    public static global::TestNamespace.TestDto FromDataReader(IDataReader reader)
    {
        if (_propIndices is null)
        {
            var unfrozenPropIndices = new Dictionary<string, int>();

            for (var i = reader.FieldCount - 1; i >= 0; i--)
            {
                var columnName = reader.GetName(i);
                unfrozenPropIndices[columnName] = i;
            }

            _propIndices = unfrozenPropIndices.ToFrozenDictionary();
        }

        var instance = new global::TestNamespace.TestDto
        {
            FirstName = reader.GetString(_propIndices["FirstName"]),
            LastName = !_propIndices.TryGetValue("LastName", out var indexLastName) ? null : reader.IsDBNull(indexLastName) ? null : reader.GetString(indexLastName)
        };
        return instance;
    }

    public static async IAsyncEnumerable<global::TestNamespace.TestDto> AsyncEnumerableFromDataReader(global::System.Data.IDataReader reader, [global::System.Runtime.CompilerServices.EnumeratorCancellation] CancellationToken cancellationToken)
    {
        var dbReader = reader as global::System.Data.Common.DbDataReader;
        while (await ReadAsync())
        {
            var instance = FromDataReader(reader);
            yield return instance;
        }

        async ValueTask<bool> ReadAsync()
        {
            return dbReader is not null
                ? await dbReader.ReadAsync(cancellationToken)
                : reader.Read();
        }
    }
}
