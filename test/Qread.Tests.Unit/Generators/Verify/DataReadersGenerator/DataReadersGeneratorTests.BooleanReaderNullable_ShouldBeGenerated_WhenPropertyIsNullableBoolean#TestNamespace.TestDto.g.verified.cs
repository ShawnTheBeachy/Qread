//HintName: TestNamespace.TestDto.g.cs
// <auto-generated />
#nullable enable

using System.Data;

namespace TestNamespace;

partial record TestDto
{
    public static global::TestNamespace.TestDto FromDataReader(IDataReader reader)
    {
        var instance = new global::TestNamespace.TestDto
        {
            IsDisabled = reader.IsDBNull(0) ? null : reader.GetBoolean(0),
            IsDisabled2 = reader.IsDBNull(1) ? null : reader.GetBoolean(1)
        };
        return instance;
    }

    public static async IAsyncEnumerable<global::TestNamespace.TestDto> AsyncEnumerableFromDataReader(global::System.Data.IDataReader reader, [global::System.Runtime.CompilerServices.EnumeratorCancellation] CancellationToken cancellationToken)
    {
        var dbReader = reader as global::System.Data.Common.DbDataReader;

        while (await ReadAsync())
        {
            var instance = FromDataReader(reader);
            yield return instance;
        }

        async ValueTask<bool> ReadAsync()
        {
            return dbReader is not null
                ? await dbReader.ReadAsync(cancellationToken)
                : reader.Read();
        }
    }
}
