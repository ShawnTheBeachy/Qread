//HintName: TestNamespace.ITest.TestDto.g.cs
// <auto-generated />
#nullable enable

using System.Data;

namespace TestNamespace;

partial interface ITest
{
    partial record struct TestDto
    {
        public static global::TestNamespace.ITest.TestDto FromDataReader(IDataReader reader)
        {
            var instance = new global::TestNamespace.ITest.TestDto
            {
            };
            return instance;
        }

        public static async IAsyncEnumerable<global::TestNamespace.ITest.TestDto> AsyncEnumerableFromDataReader(global::System.Data.IDataReader reader, [global::System.Runtime.CompilerServices.EnumeratorCancellation] CancellationToken cancellationToken)
        {
            var dbReader = reader as global::System.Data.Common.DbDataReader;

            while (await ReadAsync())
            {
                var instance = FromDataReader(reader);
                yield return instance;
            }

            async ValueTask<bool> ReadAsync()
            {
                return dbReader is not null
                    ? await dbReader.ReadAsync(cancellationToken)
                    : reader.Read();
            }
        }
    }
}
