//HintName: TestNamespace.TestDto.g.cs
// <auto-generated />
#nullable enable
using System.Collections.Frozen;
using System.Data;

namespace TestNamespace;

partial record TestDto
{
    public static global::TestNamespace.TestDto FromDataReader(IDataReader reader)
    {
        var propIndices = new Dictionary<string, int>(reader.FieldCount);

        for (var i = reader.FieldCount - 1; i >= 0; i--)
        {
            var columnName = reader.GetName(i);
            propIndices[columnName] = i;
        }

        return FromDataReader(reader, propIndices, null)!;
    }

    public static global::TestNamespace.TestDto? FromDataReader(IDataReader reader, Dictionary<string, int> propIndices, string? prefix)
    {
        var test2 = global::TestNamespace.Test2Dto.FromDataReader(reader, propIndices, $"{prefix}Test2_");

        if (test2 is null)
            return null;

        var instance = new global::TestNamespace.TestDto
        {
            Test2 = test2
        };
        return instance;
    }

    public static async IAsyncEnumerable<global::TestNamespace.TestDto> AsyncEnumerableFromDataReader(global::System.Data.IDataReader reader, [global::System.Runtime.CompilerServices.EnumeratorCancellation] CancellationToken cancellationToken)
    {
        var dbReader = reader as global::System.Data.Common.DbDataReader;

        while (await ReadAsync())
        {
            var instance = FromDataReader(reader);
            yield return instance;
        }

        async ValueTask<bool> ReadAsync()
        {
            return dbReader is not null
                ? await dbReader.ReadAsync(cancellationToken)
                : reader.Read();
        }
    }
}
